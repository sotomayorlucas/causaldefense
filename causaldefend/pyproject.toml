[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "causaldefend"
version = "0.1.0"
description = "Explainable and Compliant APT Detection via Causal Graph Neural Networks"
authors = [
    {name = "CausalDefend Team", email = "team@causaldefend.ai"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["apt-detection", "gnn", "causal-inference", "cybersecurity", "explainable-ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "torch>=2.1.0",
    "torch-geometric>=2.4.0",
    "networkx>=3.2",
    "causal-learn>=0.1.3",
    "pgmpy>=0.1.24",
    "mapie>=0.7.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.23",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pytorch-lightning>=2.1.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "isort>=5.12.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
]
experiments = [
    "mlflow>=2.8.0",
    "wandb>=0.16.0",
]

[project.urls]
Homepage = "https://github.com/causaldefend/causaldefend"
Documentation = "https://causaldefend.readthedocs.io"
Repository = "https://github.com/causaldefend/causaldefend"
Issues = "https://github.com/causaldefend/causaldefend/issues"

[project.scripts]
causaldefend-train = "causaldefend.scripts.train_detector:main"
causaldefend-serve = "causaldefend.scripts.serve_api:main"
causaldefend-pipeline = "causaldefend.scripts.run_pipeline:main"

[tool.setuptools]
packages = ["causaldefend"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch_geometric.*",
    "causal_learn.*",
    "pgmpy.*",
    "mapie.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=causaldefend --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
]
pythonpath = [
    "src"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
